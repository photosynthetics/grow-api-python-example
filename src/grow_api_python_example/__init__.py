# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: ps_common.proto, ps_controller_service.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from datetime import (
    datetime,
    timedelta,
)
from typing import (
    TYPE_CHECKING,
    AsyncIterator,
    Dict,
    List,
    Optional,
)

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class PbGrowLightLengthType(betterproto.Enum):
    SIXTY_CM = 0
    HUNDRED_TWENTY_CM = 1
    TWO_HUNDRED_FORTY_CM = 2


class PbGrowLightLedType(betterproto.Enum):
    LED_TYPE_V1 = 0


class GrowDeviceType(betterproto.Enum):
    grow_light_v1 = 0
    grow_light_sensor_v1 = 1
    grow_rdm_dmx_controller_v1 = 2
    grow_sensor_board = 3


class PbGrowSensorType(betterproto.Enum):
    TEMP_HUMID_SHT40 = 0
    LIGHT_AS7343 = 1
    DISTANCE_VL53L8X = 2


class Vl53L8CxPartialDataType(betterproto.Enum):
    DISTANCE_MM = 0


class LightSensorMeasurementRequestType(betterproto.Enum):
    AUTOMATIC_GAIN_AND_INTEGRATION_TIME = 0
    AUTOMATIC_GAIN_FIXED_INTEGRATION_TIME = 1
    MANUAL_GAIN_AND_INTEGRATION_TIME = 2


@dataclass(eq=False, repr=False)
class VersionMessage(betterproto.Message):
    major: Optional[int] = betterproto.uint32_field(1, optional=True)
    minor: Optional[int] = betterproto.uint32_field(2, optional=True)
    revision: Optional[int] = betterproto.uint32_field(3, optional=True)
    build: Optional[int] = betterproto.uint32_field(4, optional=True)


@dataclass(eq=False, repr=False)
class SerialNumberMessage(betterproto.Message):
    data: Optional[bytes] = betterproto.bytes_field(1, optional=True)


@dataclass(eq=False, repr=False)
class GrowLightStateMessage(betterproto.Message):
    pcb_temperature_c: Optional[float] = betterproto.float_field(1, optional=True)
    emitter_temperature_c: Optional[float] = betterproto.float_field(2, optional=True)
    voltage: Optional[float] = betterproto.float_field(3, optional=True)
    current: Optional[float] = betterproto.float_field(4, optional=True)
    power_draw: Optional[float] = betterproto.float_field(5, optional=True)
    pwm_outputs: List[float] = betterproto.float_field(6)


@dataclass(eq=False, repr=False)
class GrowLightSensorStateMessage(betterproto.Message):
    pcb_temperature_c: Optional[float] = betterproto.float_field(1, optional=True)
    emitter_temperature_c: Optional[float] = betterproto.float_field(2, optional=True)
    voltage: Optional[float] = betterproto.float_field(3, optional=True)
    current: Optional[float] = betterproto.float_field(4, optional=True)
    power_draw: Optional[float] = betterproto.float_field(5, optional=True)
    is_streaming_measurements: Optional[bool] = betterproto.bool_field(6, optional=True)
    as7343_measurement: Optional["As7343MeasurementMessage"] = (
        betterproto.message_field(7, optional=True)
    )


@dataclass(eq=False, repr=False)
class GrowSensorBoardStateMessage(betterproto.Message):
    pcb_temperature_c: Optional[float] = betterproto.float_field(1, optional=True)
    emitter_temperature_c: Optional[float] = betterproto.float_field(2, optional=True)
    voltage: Optional[float] = betterproto.float_field(3, optional=True)
    current: Optional[float] = betterproto.float_field(4, optional=True)
    power_draw: Optional[float] = betterproto.float_field(5, optional=True)
    capability_light_sensor_as7343: Optional[bool] = betterproto.bool_field(
        6, optional=True
    )
    capability_temp_humid_sht40: Optional[bool] = betterproto.bool_field(
        7, optional=True
    )
    capability_distance_vl53_l8_cx: Optional[bool] = betterproto.bool_field(
        8, optional=True
    )


@dataclass(eq=False, repr=False)
class As7343MeasurementMessage(betterproto.Message):
    stored_dark_offsets: List[float] = betterproto.float_field(1)
    """
    F1, F2, FZ, F3, F4, FY, F5, FXL, F6, F7, F8, NIR
    repeated double basic_counts = 1; dont have the capacity to send 12* doubles
    """

    raw_counts: List[int] = betterproto.uint32_field(2)
    int_step_size: int = betterproto.uint32_field(3)
    int_step_count: int = betterproto.uint32_field(4)
    integration_time_ms: float = betterproto.float_field(5)
    gain_value: float = betterproto.float_field(6)
    gain_enum_value: int = betterproto.uint32_field(7)
    measurement_time_ms: int = betterproto.uint32_field(9)
    adc_utilization: float = betterproto.float_field(10)
    timestamp: int = betterproto.uint64_field(11)


@dataclass(eq=False, repr=False)
class ProcessedLightSensorMeasurementMessage(betterproto.Message):
    pfd_360_780_nm: float = betterproto.float_field(1)
    ppfd_400_700_nm: float = betterproto.float_field(2)
    ppfd_400_500_nm: float = betterproto.float_field(3)
    ppfd_500_600_nm: float = betterproto.float_field(4)
    ppfd_600_700_nm: float = betterproto.float_field(5)
    has_sliding_window_average: bool = betterproto.bool_field(6)
    sliding_window_average_pfd_360_780_nm: float = betterproto.float_field(7)
    sliding_window_average_ppfd_400_700_nm: float = betterproto.float_field(8)
    sliding_window_average_ppfd_400_500_nm: float = betterproto.float_field(9)
    sliding_window_average_ppfd_500_600_nm: float = betterproto.float_field(10)
    sliding_window_average_ppfd_600_700_nm: float = betterproto.float_field(11)
    sliding_window_size: int = betterproto.uint32_field(12)
    timestamp: int = betterproto.uint64_field(13)
    scaling_factor: float = betterproto.float_field(14)


@dataclass(eq=False, repr=False)
class Sht40MeasurementMessage(betterproto.Message):
    did_use_heater: bool = betterproto.bool_field(1)
    temperature: float = betterproto.float_field(2)
    humidity: float = betterproto.float_field(3)
    temperature_with_heater: float = betterproto.float_field(4)
    humidity_with_heater: float = betterproto.float_field(5)
    timestamp: int = betterproto.uint64_field(6)


@dataclass(eq=False, repr=False)
class Vl53L8CxPartialData(betterproto.Message):
    type: "Vl53L8CxPartialDataType" = betterproto.enum_field(1)
    data: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class SensorDataRequest(betterproto.Message):
    light_sensor_measurement_request: "LightSensorMeasurementRequest" = (
        betterproto.message_field(1, group="which_sensor")
    )
    get_latest_sensor_data: "PbGrowSensorType" = betterproto.enum_field(
        2, group="which_sensor"
    )
    """
    Just get the latest sensor data that is already measured automatically on the board
     VL53 latest defaults to just distances
    """


@dataclass(eq=False, repr=False)
class LightSensorMeasurementRequest(betterproto.Message):
    request_type: Optional["LightSensorMeasurementRequestType"] = (
        betterproto.enum_field(1, optional=True)
    )
    maximum_integration_time_ms: Optional[float] = betterproto.float_field(
        2, optional=True
    )
    gain_value: Optional[float] = betterproto.float_field(3, optional=True)
    gain_enum_value: Optional[int] = betterproto.int32_field(4, optional=True)
    integration_time_ms: Optional[float] = betterproto.float_field(5, optional=True)
    timeout_ms: Optional[int] = betterproto.int32_field(6, optional=True)
    do_dark_calibration: Optional[bool] = betterproto.bool_field(7, optional=True)


@dataclass(eq=False, repr=False)
class Vl53L8CxPartialDataRequest(betterproto.Message):
    request: "Vl53L8CxPartialDataType" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class BusDeviceStateMessage(betterproto.Message):
    device_uid: Optional[int] = betterproto.uint64_field(1, optional=True)
    session_id: Optional[int] = betterproto.uint32_field(3, optional=True)
    device_type: Optional["GrowDeviceType"] = betterproto.enum_field(4, optional=True)
    version: Optional["VersionMessage"] = betterproto.message_field(5, optional=True)
    serial_number: Optional["SerialNumberMessage"] = betterproto.message_field(
        6, optional=True
    )
    grow_light_state_message: "GrowLightStateMessage" = betterproto.message_field(
        7, group="message_type"
    )
    grow_sensor_board_state_message: "GrowSensorBoardStateMessage" = (
        betterproto.message_field(10, group="message_type")
    )
    """GrowLightSensorStateMessage growLightSensorStateMessage = 9;"""

    grow_settings_message: Optional["GrowSettingsMessage"] = betterproto.message_field(
        8, optional=True
    )


@dataclass(eq=False, repr=False)
class GrowSettingsMessage(betterproto.Message):
    password: Optional[int] = betterproto.uint32_field(1, optional=True)
    grow_light_length: Optional["PbGrowLightLengthType"] = betterproto.enum_field(
        2, optional=True
    )
    grow_light_led_type: Optional["PbGrowLightLedType"] = betterproto.enum_field(
        3, optional=True
    )
    dmx_broadcast_group: Optional[int] = betterproto.uint32_field(4, optional=True)
    stream_light_measurements: Optional[bool] = betterproto.bool_field(5, optional=True)
    """Light sensor specific"""

    time_between_streaming_light_measurements_ms: Optional[int] = (
        betterproto.uint32_field(6, optional=True)
    )
    maximum_integration_time_ms: Optional[int] = betterproto.uint32_field(
        7, optional=True
    )


@dataclass(eq=False, repr=False)
class InterfaceModuleSettings(betterproto.Message):
    update_submodule_interval: Optional[timedelta] = betterproto.message_field(
        1, optional=True
    )


@dataclass(eq=False, repr=False)
class InterfaceSubmoduleSettings(betterproto.Message):
    update_bus_devices_interval: Optional[timedelta] = betterproto.message_field(
        1, optional=True
    )


@dataclass(eq=False, repr=False)
class GitHubReleaseMessage(betterproto.Message):
    """
    ############################################//
     Shared with grpc services
     ############################################//
    """

    tag_name: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)
    body: str = betterproto.string_field(3)
    draft: bool = betterproto.bool_field(4)
    prerelease: bool = betterproto.bool_field(5)
    published_at: str = betterproto.string_field(6)
    created_at: str = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class BusSensorLatestMeasurementsMessage(betterproto.Message):
    device_uid: int = betterproto.uint64_field(1)
    sht40_measurement: Optional["Sht40MeasurementMessage"] = betterproto.message_field(
        3, optional=True
    )
    """optional As7343MeasurementMessage as7343_measurement = 2;"""

    vl53_distances: Optional["Vl53L8CxPartialData"] = betterproto.message_field(
        4, optional=True
    )
    processed_light_sensor_measurements: Optional[
        "ProcessedLightSensorMeasurementMessage"
    ] = betterproto.message_field(5, optional=True)


@dataclass(eq=False, repr=False)
class InterfaceSubmoduleMessage(betterproto.Message):
    serial_number: str = betterproto.string_field(1)
    fw_version: "VersionMessage" = betterproto.message_field(2)
    grow_rdm_devices: List["BusDeviceStateMessage"] = betterproto.message_field(3)
    settings: "InterfaceSubmoduleSettings" = betterproto.message_field(4)
    sensor_boards_latest_measurements: List["BusSensorLatestMeasurementsMessage"] = (
        betterproto.message_field(5)
    )


@dataclass(eq=False, repr=False)
class UpdateInterfaceModuleRequest(betterproto.Message):
    id: str = betterproto.string_field(1)
    release: "GitHubReleaseMessage" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class InterfaceModuleMessage(betterproto.Message):
    status: "Status" = betterproto.message_field(1)
    id: str = betterproto.string_field(2)
    sw_version: "VersionMessage" = betterproto.message_field(3)
    interface_submodules: List["InterfaceSubmoduleMessage"] = betterproto.message_field(
        4
    )
    session_id: int = betterproto.int32_field(5)
    uptime: timedelta = betterproto.message_field(6)
    is_updating_rdm_box_fw: bool = betterproto.bool_field(7)
    settings: "InterfaceModuleSettings" = betterproto.message_field(8)
    grpc_host: str = betterproto.string_field(9)
    grpc_port: int = betterproto.int32_field(10)
    submodule_fw_version: "VersionMessage" = betterproto.message_field(11)
    git_status: "GitStatusMessage" = betterproto.message_field(12)
    app_updates: List["GitHubReleaseMessage"] = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class InterfaceSubmoduleFirmwareImage(betterproto.Message):
    firmware_version: "VersionMessage" = betterproto.message_field(1)
    firmware_image: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class UpdateProgressMessage(betterproto.Message):
    status: "Status" = betterproto.message_field(1)
    percent_complete: float = betterproto.float_field(2)


@dataclass(eq=False, repr=False)
class Status(betterproto.Message):
    code: int = betterproto.int32_field(1)
    """
    The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
    """

    message: str = betterproto.string_field(2)
    """
    A developer-facing error message, which should be in English. Any
     user-facing error message should be localized and sent in the
     [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
    """

    details: List["betterproto_lib_google_protobuf.Any"] = betterproto.message_field(3)
    """
    A list of messages that carry the error details.  There is a common set of
     message types for APIs to use.
    """


@dataclass(eq=False, repr=False)
class GitStatusMessage(betterproto.Message):
    branch: str = betterproto.string_field(1)
    commit_hash: str = betterproto.string_field(2)
    commit_message: str = betterproto.string_field(3)
    commit_utc_timestamp: datetime = betterproto.message_field(4)
    commits_behind: int = betterproto.int32_field(5)
    has_uncommitted_changes: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class BusDeviceRequest(betterproto.Message):
    device_uid: int = betterproto.uint64_field(1)
    data: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class BusDeviceResponse(betterproto.Message):
    status: "Status" = betterproto.message_field(1)
    data: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class ProjectId(betterproto.Message):
    project_uuid: str = betterproto.string_field(1)
    """
    The project id is a unique identifier for a project 
    The purpose is to support multiple client side projects, which can easily be activated, deactivated, and deleted.
    The controller/server will only be actively running one project at a time. The clients can tell the controller to switch active project.
    """


@dataclass(eq=False, repr=False)
class ClientConnectionMessage(betterproto.Message):
    client_uuid: str = betterproto.string_field(1)
    client_local_ip: str = betterproto.string_field(2)
    client_public_ip: str = betterproto.string_field(3)
    client_version: "VersionMessage" = betterproto.message_field(4)
    last_ping: datetime = betterproto.message_field(5)
    connected_at: datetime = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class Uint64List(betterproto.Message):
    values: List[int] = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class ChannelOutputsMessage(betterproto.Message):
    channel_names: List[str] = betterproto.string_field(1)
    outputs: List[float] = betterproto.float_field(2)


@dataclass(eq=False, repr=False)
class FirmwareReleaseMessage(betterproto.Message):
    product_name: str = betterproto.string_field(1)
    device_type: "GrowDeviceType" = betterproto.enum_field(2)
    version: "VersionMessage" = betterproto.message_field(3)
    changelog: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class LightSensorMeasurementMessage(betterproto.Message):
    sensor_uid: int = betterproto.uint64_field(1)
    measurements: List["ProcessedLightSensorMeasurementMessage"] = (
        betterproto.message_field(2)
    )
    utc_timestamps: List[int] = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class UpdateServerRequest(betterproto.Message):
    release: "GitHubReleaseMessage" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetActiveProjectRequest(betterproto.Message):
    project_id: "ProjectId" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SetActiveProjectRequest(betterproto.Message):
    project_id: "ProjectId" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class DeleteProjectRequest(betterproto.Message):
    project_id: "ProjectId" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetControllerInfoResponse(betterproto.Message):
    status: "Status" = betterproto.message_field(1)
    active_project: "ProjectId" = betterproto.message_field(100)
    id: str = betterproto.string_field(8)
    name: str = betterproto.string_field(2)
    sw_version: str = betterproto.string_field(10)
    session_id: int = betterproto.int32_field(4)
    interfaces: List["InterfaceModuleMessage"] = betterproto.message_field(9)
    """ControllerSettings settings = 7;"""

    app_updates: List["GitHubReleaseMessage"] = betterproto.message_field(11)
    connected_clients: List["ClientConnectionMessage"] = betterproto.message_field(12)


@dataclass(eq=False, repr=False)
class GetLightSensorMeasurementsRequest(betterproto.Message):
    sensor_uids: List[int] = betterproto.uint64_field(1)
    request_all_sensors: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class GetLightSensorMeasurementsResponse(betterproto.Message):
    status: "Status" = betterproto.message_field(1)
    sensor_measurements: List["LightSensorMeasurementMessage"] = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class GetAllInterfacesRequest(betterproto.Message):
    project_id: "ProjectId" = betterproto.message_field(100)
    force_update: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class SetProjectStateRequest(betterproto.Message):
    json_project_state: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetProjectStateResponse(betterproto.Message):
    status: "Status" = betterproto.message_field(1)
    json_project_state: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetProjectStatesResponse(betterproto.Message):
    status: "Status" = betterproto.message_field(1)
    json_project_states: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class DeleteActiveRecipeRequest(betterproto.Message):
    project_id: "ProjectId" = betterproto.message_field(100)
    grow_zone_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class SetGrowZoneEnabledStateRequest(betterproto.Message):
    project_id: "ProjectId" = betterproto.message_field(100)
    grow_zone_id: str = betterproto.string_field(1)
    enabled: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class SetGrowZoneRequest(betterproto.Message):
    project_id: "ProjectId" = betterproto.message_field(100)
    json_grow_zone: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetGrowZonesResponse(betterproto.Message):
    project_id: "ProjectId" = betterproto.message_field(100)
    status: "Status" = betterproto.message_field(1)
    json_grow_zones: List[str] = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class SetActiveRecipeRequest(betterproto.Message):
    project_id: "ProjectId" = betterproto.message_field(100)
    json_grow_zone: str = betterproto.string_field(1)
    json_recipe: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetActiveRecipesResponse(betterproto.Message):
    project_id: "ProjectId" = betterproto.message_field(100)
    status: "Status" = betterproto.message_field(1)
    json_active_recipes: List[str] = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class SetCropRequest(betterproto.Message):
    project_id: "ProjectId" = betterproto.message_field(100)
    json_crop: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class DeleteCropRequest(betterproto.Message):
    project_id: "ProjectId" = betterproto.message_field(100)
    crop_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetCropsResponse(betterproto.Message):
    project_id: "ProjectId" = betterproto.message_field(100)
    status: "Status" = betterproto.message_field(1)
    json_crops: List[str] = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetAllInterfacesResponse(betterproto.Message):
    status: "Status" = betterproto.message_field(1)
    interfaces: List["InterfaceModuleMessage"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class IdentifyBusDeviceRequest(betterproto.Message):
    device_uids: List[int] = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class SetLightOutputRequest(betterproto.Message):
    device_uids: List[int] = betterproto.uint64_field(1)
    outputs: "ChannelOutputsMessage" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetFirmwareOverviewResponse(betterproto.Message):
    status: "Status" = betterproto.message_field(1)
    firmware_repository_branch_name: str = betterproto.string_field(2)
    firmware_releases: List["FirmwareReleaseMessage"] = betterproto.message_field(3)
    auto_update_enabled: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class SyncFirmwareRepositoryRequest(betterproto.Message):
    sync_branch_name: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class UpdateInterfaceSubmoduleRequest(betterproto.Message):
    interface_box_mac_address: str = betterproto.string_field(1)
    """
    The controller will send the specified firmware (if valid) to the specified interface module.
     The inteface module will then update all connected submodules to that version automatically.
    """

    target_device_type: "GrowDeviceType" = betterproto.enum_field(2)
    firmware_version: "VersionMessage" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class UpdateBusDevicesFirmwareRequest(betterproto.Message):
    interface_box_mac_address: str = betterproto.string_field(1)
    """
    The specified interface module will direct all connected submodules to broadcast the specified firmware
     on its bus.
    """

    interface_submodule_serial_numbers: List[str] = betterproto.string_field(2)
    target_device_type: "GrowDeviceType" = betterproto.enum_field(3)
    firmware_version: "VersionMessage" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class ControllerSendDataToSubmoduleApiRequest(betterproto.Message):
    interface_box_mac_address: str = betterproto.string_field(1)
    interface_submodule_serial_number: str = betterproto.string_field(2)
    data: bytes = betterproto.bytes_field(3)


@dataclass(eq=False, repr=False)
class ControllerSendDataToSubmoduleApiResponse(betterproto.Message):
    status: "Status" = betterproto.message_field(1)
    data: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class ControllerBroadcastMessageOnBusRequest(betterproto.Message):
    interface_submodule_serial_numbers: List[str] = betterproto.string_field(1)
    relay_count: int = betterproto.int32_field(2)
    data: bytes = betterproto.bytes_field(3)


@dataclass(eq=False, repr=False)
class SetBusDeviceSettingsRequest(betterproto.Message):
    device_uids: List[int] = betterproto.uint64_field(1)
    settings: List["GrowSettingsMessage"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SetInterfaceSubmoduleSettingsRequest(betterproto.Message):
    serial_numbers: List[str] = betterproto.string_field(1)
    settings: List["GrowSettingsMessage"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SetInterfaceModuleSettingsRequest(betterproto.Message):
    interface_box_mac_address: List[str] = betterproto.string_field(1)
    settings: List["InterfaceModuleSettings"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SetControllerSettingsRequest(betterproto.Message):
    settings: "ControllerSettings" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PingServerRequest(betterproto.Message):
    client_uuid: str = betterproto.string_field(1)
    """
    The controller/server supports being pinged by clients
     This info will be stored per client and be accessible for all clients
    """

    client_local_ip: str = betterproto.string_field(2)
    client_public_ip: str = betterproto.string_field(3)
    client_version: "VersionMessage" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class ControllerSettings(betterproto.Message):
    project_id: "ProjectId" = betterproto.message_field(100)
    update_interface_module_interval_s: float = betterproto.float_field(1)
    firmware_repository_branch_name: str = betterproto.string_field(2)
    auto_update_controller: bool = betterproto.bool_field(3)
    """
    The controller will automatically update itself if this is set to true. (checks every minute)
    """

    app_release_channel_for_auto_update: str = betterproto.string_field(4)
    """
    The channel to use when looking for updates for the controller. Velopack is used internally to handle updates of controller software.
    """

    project_local_timezone_location: str = betterproto.string_field(5)
    """
    This is the local timezone that all utc times will be adjusted by.
     Daylight savings and other factors will mess up timing if we only use UTC time.
    """

    latitude: float = betterproto.double_field(6)
    """
    Latitude and longitude of the site being controlled. This is used for estimating DLI
     at the grow site.
    """

    longitude: float = betterproto.double_field(7)
    power_area_json_string: str = betterproto.string_field(8)


class PsControllerServiceStub(betterproto.ServiceStub):
    async def update_server(
        self,
        update_server_request: "UpdateServerRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Status":
        return await self._unary_unary(
            "/PsControllerService/UpdateServer",
            update_server_request,
            Status,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_interface_module(
        self,
        update_interface_module_request: "UpdateInterfaceModuleRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Status":
        return await self._unary_unary(
            "/PsControllerService/UpdateInterfaceModule",
            update_interface_module_request,
            Status,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_active_project(
        self,
        set_active_project_request: "SetActiveProjectRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Status":
        return await self._unary_unary(
            "/PsControllerService/SetActiveProject",
            set_active_project_request,
            Status,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_active_project(
        self,
        get_active_project_request: "GetActiveProjectRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ProjectId":
        return await self._unary_unary(
            "/PsControllerService/GetActiveProject",
            get_active_project_request,
            ProjectId,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_project(
        self,
        delete_project_request: "DeleteProjectRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Status":
        return await self._unary_unary(
            "/PsControllerService/DeleteProject",
            delete_project_request,
            Status,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_project_state(
        self,
        set_project_state_request: "SetProjectStateRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Status":
        return await self._unary_unary(
            "/PsControllerService/SetProjectState",
            set_project_state_request,
            Status,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_project_state(
        self,
        project_id: "ProjectId",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetProjectStateResponse":
        return await self._unary_unary(
            "/PsControllerService/GetProjectState",
            project_id,
            GetProjectStateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_project_states(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetProjectStatesResponse":
        return await self._unary_unary(
            "/PsControllerService/GetProjectStates",
            betterproto_lib_google_protobuf_empty,
            GetProjectStatesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_controller_info(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetControllerInfoResponse":
        return await self._unary_unary(
            "/PsControllerService/GetControllerInfo",
            betterproto_lib_google_protobuf_empty,
            GetControllerInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_all_interfaces(
        self,
        get_all_interfaces_request: "GetAllInterfacesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetAllInterfacesResponse":
        return await self._unary_unary(
            "/PsControllerService/GetAllInterfaces",
            get_all_interfaces_request,
            GetAllInterfacesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def identify_bus_device(
        self,
        identify_bus_device_request: "IdentifyBusDeviceRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Status":
        return await self._unary_unary(
            "/PsControllerService/IdentifyBusDevice",
            identify_bus_device_request,
            Status,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_light_output(
        self,
        set_light_output_request: "SetLightOutputRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Status":
        return await self._unary_unary(
            "/PsControllerService/SetLightOutput",
            set_light_output_request,
            Status,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_light_sensor_measurements(
        self,
        get_light_sensor_measurements_request: "GetLightSensorMeasurementsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetLightSensorMeasurementsResponse":
        return await self._unary_unary(
            "/PsControllerService/GetLightSensorMeasurements",
            get_light_sensor_measurements_request,
            GetLightSensorMeasurementsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_grow_zone_enabled_state(
        self,
        set_grow_zone_enabled_state_request: "SetGrowZoneEnabledStateRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Status":
        return await self._unary_unary(
            "/PsControllerService/SetGrowZoneEnabledState",
            set_grow_zone_enabled_state_request,
            Status,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_grow_zone(
        self,
        set_grow_zone_request: "SetGrowZoneRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Status":
        return await self._unary_unary(
            "/PsControllerService/SetGrowZone",
            set_grow_zone_request,
            Status,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_grow_zones(
        self,
        project_id: "ProjectId",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetGrowZonesResponse":
        return await self._unary_unary(
            "/PsControllerService/GetGrowZones",
            project_id,
            GetGrowZonesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_active_recipe(
        self,
        set_active_recipe_request: "SetActiveRecipeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Status":
        return await self._unary_unary(
            "/PsControllerService/SetActiveRecipe",
            set_active_recipe_request,
            Status,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_active_recipe(
        self,
        delete_active_recipe_request: "DeleteActiveRecipeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Status":
        return await self._unary_unary(
            "/PsControllerService/DeleteActiveRecipe",
            delete_active_recipe_request,
            Status,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_active_recipes(
        self,
        project_id: "ProjectId",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetActiveRecipesResponse":
        return await self._unary_unary(
            "/PsControllerService/GetActiveRecipes",
            project_id,
            GetActiveRecipesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_crop(
        self,
        delete_crop_request: "DeleteCropRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Status":
        return await self._unary_unary(
            "/PsControllerService/DeleteCrop",
            delete_crop_request,
            Status,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_crop(
        self,
        set_crop_request: "SetCropRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Status":
        return await self._unary_unary(
            "/PsControllerService/SetCrop",
            set_crop_request,
            Status,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_crops(
        self,
        project_id: "ProjectId",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetCropsResponse":
        return await self._unary_unary(
            "/PsControllerService/GetCrops",
            project_id,
            GetCropsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def controller_send_data_to_submodule_api(
        self,
        controller_send_data_to_submodule_api_request: "ControllerSendDataToSubmoduleApiRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ControllerSendDataToSubmoduleApiResponse":
        return await self._unary_unary(
            "/PsControllerService/ControllerSendDataToSubmoduleApi",
            controller_send_data_to_submodule_api_request,
            ControllerSendDataToSubmoduleApiResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def controller_broadcast_message_on_bus(
        self,
        controller_broadcast_message_on_bus_request: "ControllerBroadcastMessageOnBusRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Status":
        return await self._unary_unary(
            "/PsControllerService/ControllerBroadcastMessageOnBus",
            controller_broadcast_message_on_bus_request,
            Status,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def controller_to_bus_device_communication(
        self,
        bus_device_request: "BusDeviceRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "BusDeviceResponse":
        return await self._unary_unary(
            "/PsControllerService/ControllerToBusDeviceCommunication",
            bus_device_request,
            BusDeviceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_firmware_overview(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetFirmwareOverviewResponse":
        return await self._unary_unary(
            "/PsControllerService/GetFirmwareOverview",
            betterproto_lib_google_protobuf_empty,
            GetFirmwareOverviewResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def sync_firmware_repository(
        self,
        sync_firmware_repository_request: "SyncFirmwareRepositoryRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Status":
        return await self._unary_unary(
            "/PsControllerService/SyncFirmwareRepository",
            sync_firmware_repository_request,
            Status,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_interface_submodules(
        self,
        update_interface_submodule_request: "UpdateInterfaceSubmoduleRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Status":
        return await self._unary_unary(
            "/PsControllerService/UpdateInterfaceSubmodules",
            update_interface_submodule_request,
            Status,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_bus_devices(
        self,
        update_bus_devices_firmware_request: "UpdateBusDevicesFirmwareRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator[UpdateProgressMessage]:
        async for response in self._unary_stream(
            "/PsControllerService/UpdateBusDevices",
            update_bus_devices_firmware_request,
            UpdateProgressMessage,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def get_controller_settings(
        self,
        project_id: "ProjectId",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ControllerSettings":
        return await self._unary_unary(
            "/PsControllerService/GetControllerSettings",
            project_id,
            ControllerSettings,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_controller_settings(
        self,
        set_controller_settings_request: "SetControllerSettingsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Status":
        return await self._unary_unary(
            "/PsControllerService/SetControllerSettings",
            set_controller_settings_request,
            Status,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_bus_device_settings(
        self,
        set_bus_device_settings_request: "SetBusDeviceSettingsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Status":
        return await self._unary_unary(
            "/PsControllerService/SetBusDeviceSettings",
            set_bus_device_settings_request,
            Status,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def set_interface_submodule_settings(
        self,
        set_interface_submodule_settings_request: "SetInterfaceSubmoduleSettingsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Status":
        return await self._unary_unary(
            "/PsControllerService/SetInterfaceSubmoduleSettings",
            set_interface_submodule_settings_request,
            Status,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def ping_server(
        self,
        ping_server_request: "PingServerRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetControllerInfoResponse":
        return await self._unary_unary(
            "/PsControllerService/PingServer",
            ping_server_request,
            GetControllerInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_control_box_db(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Status":
        return await self._unary_unary(
            "/PsControllerService/DeleteControlBoxDb",
            betterproto_lib_google_protobuf_empty,
            Status,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class PsControllerServiceBase(ServiceBase):

    async def update_server(
        self, update_server_request: "UpdateServerRequest"
    ) -> "Status":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_interface_module(
        self, update_interface_module_request: "UpdateInterfaceModuleRequest"
    ) -> "Status":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_active_project(
        self, set_active_project_request: "SetActiveProjectRequest"
    ) -> "Status":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_active_project(
        self, get_active_project_request: "GetActiveProjectRequest"
    ) -> "ProjectId":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_project(
        self, delete_project_request: "DeleteProjectRequest"
    ) -> "Status":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_project_state(
        self, set_project_state_request: "SetProjectStateRequest"
    ) -> "Status":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_project_state(
        self, project_id: "ProjectId"
    ) -> "GetProjectStateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_project_states(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
    ) -> "GetProjectStatesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_controller_info(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
    ) -> "GetControllerInfoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_all_interfaces(
        self, get_all_interfaces_request: "GetAllInterfacesRequest"
    ) -> "GetAllInterfacesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def identify_bus_device(
        self, identify_bus_device_request: "IdentifyBusDeviceRequest"
    ) -> "Status":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_light_output(
        self, set_light_output_request: "SetLightOutputRequest"
    ) -> "Status":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_light_sensor_measurements(
        self, get_light_sensor_measurements_request: "GetLightSensorMeasurementsRequest"
    ) -> "GetLightSensorMeasurementsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_grow_zone_enabled_state(
        self, set_grow_zone_enabled_state_request: "SetGrowZoneEnabledStateRequest"
    ) -> "Status":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_grow_zone(
        self, set_grow_zone_request: "SetGrowZoneRequest"
    ) -> "Status":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_grow_zones(self, project_id: "ProjectId") -> "GetGrowZonesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_active_recipe(
        self, set_active_recipe_request: "SetActiveRecipeRequest"
    ) -> "Status":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_active_recipe(
        self, delete_active_recipe_request: "DeleteActiveRecipeRequest"
    ) -> "Status":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_active_recipes(
        self, project_id: "ProjectId"
    ) -> "GetActiveRecipesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_crop(self, delete_crop_request: "DeleteCropRequest") -> "Status":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_crop(self, set_crop_request: "SetCropRequest") -> "Status":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_crops(self, project_id: "ProjectId") -> "GetCropsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def controller_send_data_to_submodule_api(
        self,
        controller_send_data_to_submodule_api_request: "ControllerSendDataToSubmoduleApiRequest",
    ) -> "ControllerSendDataToSubmoduleApiResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def controller_broadcast_message_on_bus(
        self,
        controller_broadcast_message_on_bus_request: "ControllerBroadcastMessageOnBusRequest",
    ) -> "Status":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def controller_to_bus_device_communication(
        self, bus_device_request: "BusDeviceRequest"
    ) -> "BusDeviceResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_firmware_overview(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
    ) -> "GetFirmwareOverviewResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def sync_firmware_repository(
        self, sync_firmware_repository_request: "SyncFirmwareRepositoryRequest"
    ) -> "Status":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_interface_submodules(
        self, update_interface_submodule_request: "UpdateInterfaceSubmoduleRequest"
    ) -> "Status":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_bus_devices(
        self, update_bus_devices_firmware_request: "UpdateBusDevicesFirmwareRequest"
    ) -> AsyncIterator[UpdateProgressMessage]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield UpdateProgressMessage()

    async def get_controller_settings(
        self, project_id: "ProjectId"
    ) -> "ControllerSettings":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_controller_settings(
        self, set_controller_settings_request: "SetControllerSettingsRequest"
    ) -> "Status":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_bus_device_settings(
        self, set_bus_device_settings_request: "SetBusDeviceSettingsRequest"
    ) -> "Status":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def set_interface_submodule_settings(
        self,
        set_interface_submodule_settings_request: "SetInterfaceSubmoduleSettingsRequest",
    ) -> "Status":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def ping_server(
        self, ping_server_request: "PingServerRequest"
    ) -> "GetControllerInfoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_control_box_db(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
    ) -> "Status":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_update_server(
        self, stream: "grpclib.server.Stream[UpdateServerRequest, Status]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_server(request)
        await stream.send_message(response)

    async def __rpc_update_interface_module(
        self, stream: "grpclib.server.Stream[UpdateInterfaceModuleRequest, Status]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_interface_module(request)
        await stream.send_message(response)

    async def __rpc_set_active_project(
        self, stream: "grpclib.server.Stream[SetActiveProjectRequest, Status]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_active_project(request)
        await stream.send_message(response)

    async def __rpc_get_active_project(
        self, stream: "grpclib.server.Stream[GetActiveProjectRequest, ProjectId]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_active_project(request)
        await stream.send_message(response)

    async def __rpc_delete_project(
        self, stream: "grpclib.server.Stream[DeleteProjectRequest, Status]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_project(request)
        await stream.send_message(response)

    async def __rpc_set_project_state(
        self, stream: "grpclib.server.Stream[SetProjectStateRequest, Status]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_project_state(request)
        await stream.send_message(response)

    async def __rpc_get_project_state(
        self, stream: "grpclib.server.Stream[ProjectId, GetProjectStateResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_project_state(request)
        await stream.send_message(response)

    async def __rpc_get_project_states(
        self,
        stream: "grpclib.server.Stream[betterproto_lib_google_protobuf.Empty, GetProjectStatesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_project_states(request)
        await stream.send_message(response)

    async def __rpc_get_controller_info(
        self,
        stream: "grpclib.server.Stream[betterproto_lib_google_protobuf.Empty, GetControllerInfoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_controller_info(request)
        await stream.send_message(response)

    async def __rpc_get_all_interfaces(
        self,
        stream: "grpclib.server.Stream[GetAllInterfacesRequest, GetAllInterfacesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_all_interfaces(request)
        await stream.send_message(response)

    async def __rpc_identify_bus_device(
        self, stream: "grpclib.server.Stream[IdentifyBusDeviceRequest, Status]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.identify_bus_device(request)
        await stream.send_message(response)

    async def __rpc_set_light_output(
        self, stream: "grpclib.server.Stream[SetLightOutputRequest, Status]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_light_output(request)
        await stream.send_message(response)

    async def __rpc_get_light_sensor_measurements(
        self,
        stream: "grpclib.server.Stream[GetLightSensorMeasurementsRequest, GetLightSensorMeasurementsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_light_sensor_measurements(request)
        await stream.send_message(response)

    async def __rpc_set_grow_zone_enabled_state(
        self, stream: "grpclib.server.Stream[SetGrowZoneEnabledStateRequest, Status]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_grow_zone_enabled_state(request)
        await stream.send_message(response)

    async def __rpc_set_grow_zone(
        self, stream: "grpclib.server.Stream[SetGrowZoneRequest, Status]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_grow_zone(request)
        await stream.send_message(response)

    async def __rpc_get_grow_zones(
        self, stream: "grpclib.server.Stream[ProjectId, GetGrowZonesResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_grow_zones(request)
        await stream.send_message(response)

    async def __rpc_set_active_recipe(
        self, stream: "grpclib.server.Stream[SetActiveRecipeRequest, Status]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_active_recipe(request)
        await stream.send_message(response)

    async def __rpc_delete_active_recipe(
        self, stream: "grpclib.server.Stream[DeleteActiveRecipeRequest, Status]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_active_recipe(request)
        await stream.send_message(response)

    async def __rpc_get_active_recipes(
        self, stream: "grpclib.server.Stream[ProjectId, GetActiveRecipesResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_active_recipes(request)
        await stream.send_message(response)

    async def __rpc_delete_crop(
        self, stream: "grpclib.server.Stream[DeleteCropRequest, Status]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_crop(request)
        await stream.send_message(response)

    async def __rpc_set_crop(
        self, stream: "grpclib.server.Stream[SetCropRequest, Status]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_crop(request)
        await stream.send_message(response)

    async def __rpc_get_crops(
        self, stream: "grpclib.server.Stream[ProjectId, GetCropsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_crops(request)
        await stream.send_message(response)

    async def __rpc_controller_send_data_to_submodule_api(
        self,
        stream: "grpclib.server.Stream[ControllerSendDataToSubmoduleApiRequest, ControllerSendDataToSubmoduleApiResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.controller_send_data_to_submodule_api(request)
        await stream.send_message(response)

    async def __rpc_controller_broadcast_message_on_bus(
        self,
        stream: "grpclib.server.Stream[ControllerBroadcastMessageOnBusRequest, Status]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.controller_broadcast_message_on_bus(request)
        await stream.send_message(response)

    async def __rpc_controller_to_bus_device_communication(
        self, stream: "grpclib.server.Stream[BusDeviceRequest, BusDeviceResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.controller_to_bus_device_communication(request)
        await stream.send_message(response)

    async def __rpc_get_firmware_overview(
        self,
        stream: "grpclib.server.Stream[betterproto_lib_google_protobuf.Empty, GetFirmwareOverviewResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_firmware_overview(request)
        await stream.send_message(response)

    async def __rpc_sync_firmware_repository(
        self, stream: "grpclib.server.Stream[SyncFirmwareRepositoryRequest, Status]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.sync_firmware_repository(request)
        await stream.send_message(response)

    async def __rpc_update_interface_submodules(
        self, stream: "grpclib.server.Stream[UpdateInterfaceSubmoduleRequest, Status]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_interface_submodules(request)
        await stream.send_message(response)

    async def __rpc_update_bus_devices(
        self,
        stream: "grpclib.server.Stream[UpdateBusDevicesFirmwareRequest, UpdateProgressMessage]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.update_bus_devices,
            stream,
            request,
        )

    async def __rpc_get_controller_settings(
        self, stream: "grpclib.server.Stream[ProjectId, ControllerSettings]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_controller_settings(request)
        await stream.send_message(response)

    async def __rpc_set_controller_settings(
        self, stream: "grpclib.server.Stream[SetControllerSettingsRequest, Status]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_controller_settings(request)
        await stream.send_message(response)

    async def __rpc_set_bus_device_settings(
        self, stream: "grpclib.server.Stream[SetBusDeviceSettingsRequest, Status]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_bus_device_settings(request)
        await stream.send_message(response)

    async def __rpc_set_interface_submodule_settings(
        self,
        stream: "grpclib.server.Stream[SetInterfaceSubmoduleSettingsRequest, Status]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.set_interface_submodule_settings(request)
        await stream.send_message(response)

    async def __rpc_ping_server(
        self,
        stream: "grpclib.server.Stream[PingServerRequest, GetControllerInfoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.ping_server(request)
        await stream.send_message(response)

    async def __rpc_delete_control_box_db(
        self,
        stream: "grpclib.server.Stream[betterproto_lib_google_protobuf.Empty, Status]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_control_box_db(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/PsControllerService/UpdateServer": grpclib.const.Handler(
                self.__rpc_update_server,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateServerRequest,
                Status,
            ),
            "/PsControllerService/UpdateInterfaceModule": grpclib.const.Handler(
                self.__rpc_update_interface_module,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateInterfaceModuleRequest,
                Status,
            ),
            "/PsControllerService/SetActiveProject": grpclib.const.Handler(
                self.__rpc_set_active_project,
                grpclib.const.Cardinality.UNARY_UNARY,
                SetActiveProjectRequest,
                Status,
            ),
            "/PsControllerService/GetActiveProject": grpclib.const.Handler(
                self.__rpc_get_active_project,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetActiveProjectRequest,
                ProjectId,
            ),
            "/PsControllerService/DeleteProject": grpclib.const.Handler(
                self.__rpc_delete_project,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteProjectRequest,
                Status,
            ),
            "/PsControllerService/SetProjectState": grpclib.const.Handler(
                self.__rpc_set_project_state,
                grpclib.const.Cardinality.UNARY_UNARY,
                SetProjectStateRequest,
                Status,
            ),
            "/PsControllerService/GetProjectState": grpclib.const.Handler(
                self.__rpc_get_project_state,
                grpclib.const.Cardinality.UNARY_UNARY,
                ProjectId,
                GetProjectStateResponse,
            ),
            "/PsControllerService/GetProjectStates": grpclib.const.Handler(
                self.__rpc_get_project_states,
                grpclib.const.Cardinality.UNARY_UNARY,
                betterproto_lib_google_protobuf.Empty,
                GetProjectStatesResponse,
            ),
            "/PsControllerService/GetControllerInfo": grpclib.const.Handler(
                self.__rpc_get_controller_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                betterproto_lib_google_protobuf.Empty,
                GetControllerInfoResponse,
            ),
            "/PsControllerService/GetAllInterfaces": grpclib.const.Handler(
                self.__rpc_get_all_interfaces,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetAllInterfacesRequest,
                GetAllInterfacesResponse,
            ),
            "/PsControllerService/IdentifyBusDevice": grpclib.const.Handler(
                self.__rpc_identify_bus_device,
                grpclib.const.Cardinality.UNARY_UNARY,
                IdentifyBusDeviceRequest,
                Status,
            ),
            "/PsControllerService/SetLightOutput": grpclib.const.Handler(
                self.__rpc_set_light_output,
                grpclib.const.Cardinality.UNARY_UNARY,
                SetLightOutputRequest,
                Status,
            ),
            "/PsControllerService/GetLightSensorMeasurements": grpclib.const.Handler(
                self.__rpc_get_light_sensor_measurements,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetLightSensorMeasurementsRequest,
                GetLightSensorMeasurementsResponse,
            ),
            "/PsControllerService/SetGrowZoneEnabledState": grpclib.const.Handler(
                self.__rpc_set_grow_zone_enabled_state,
                grpclib.const.Cardinality.UNARY_UNARY,
                SetGrowZoneEnabledStateRequest,
                Status,
            ),
            "/PsControllerService/SetGrowZone": grpclib.const.Handler(
                self.__rpc_set_grow_zone,
                grpclib.const.Cardinality.UNARY_UNARY,
                SetGrowZoneRequest,
                Status,
            ),
            "/PsControllerService/GetGrowZones": grpclib.const.Handler(
                self.__rpc_get_grow_zones,
                grpclib.const.Cardinality.UNARY_UNARY,
                ProjectId,
                GetGrowZonesResponse,
            ),
            "/PsControllerService/SetActiveRecipe": grpclib.const.Handler(
                self.__rpc_set_active_recipe,
                grpclib.const.Cardinality.UNARY_UNARY,
                SetActiveRecipeRequest,
                Status,
            ),
            "/PsControllerService/DeleteActiveRecipe": grpclib.const.Handler(
                self.__rpc_delete_active_recipe,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteActiveRecipeRequest,
                Status,
            ),
            "/PsControllerService/GetActiveRecipes": grpclib.const.Handler(
                self.__rpc_get_active_recipes,
                grpclib.const.Cardinality.UNARY_UNARY,
                ProjectId,
                GetActiveRecipesResponse,
            ),
            "/PsControllerService/DeleteCrop": grpclib.const.Handler(
                self.__rpc_delete_crop,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteCropRequest,
                Status,
            ),
            "/PsControllerService/SetCrop": grpclib.const.Handler(
                self.__rpc_set_crop,
                grpclib.const.Cardinality.UNARY_UNARY,
                SetCropRequest,
                Status,
            ),
            "/PsControllerService/GetCrops": grpclib.const.Handler(
                self.__rpc_get_crops,
                grpclib.const.Cardinality.UNARY_UNARY,
                ProjectId,
                GetCropsResponse,
            ),
            "/PsControllerService/ControllerSendDataToSubmoduleApi": grpclib.const.Handler(
                self.__rpc_controller_send_data_to_submodule_api,
                grpclib.const.Cardinality.UNARY_UNARY,
                ControllerSendDataToSubmoduleApiRequest,
                ControllerSendDataToSubmoduleApiResponse,
            ),
            "/PsControllerService/ControllerBroadcastMessageOnBus": grpclib.const.Handler(
                self.__rpc_controller_broadcast_message_on_bus,
                grpclib.const.Cardinality.UNARY_UNARY,
                ControllerBroadcastMessageOnBusRequest,
                Status,
            ),
            "/PsControllerService/ControllerToBusDeviceCommunication": grpclib.const.Handler(
                self.__rpc_controller_to_bus_device_communication,
                grpclib.const.Cardinality.UNARY_UNARY,
                BusDeviceRequest,
                BusDeviceResponse,
            ),
            "/PsControllerService/GetFirmwareOverview": grpclib.const.Handler(
                self.__rpc_get_firmware_overview,
                grpclib.const.Cardinality.UNARY_UNARY,
                betterproto_lib_google_protobuf.Empty,
                GetFirmwareOverviewResponse,
            ),
            "/PsControllerService/SyncFirmwareRepository": grpclib.const.Handler(
                self.__rpc_sync_firmware_repository,
                grpclib.const.Cardinality.UNARY_UNARY,
                SyncFirmwareRepositoryRequest,
                Status,
            ),
            "/PsControllerService/UpdateInterfaceSubmodules": grpclib.const.Handler(
                self.__rpc_update_interface_submodules,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateInterfaceSubmoduleRequest,
                Status,
            ),
            "/PsControllerService/UpdateBusDevices": grpclib.const.Handler(
                self.__rpc_update_bus_devices,
                grpclib.const.Cardinality.UNARY_STREAM,
                UpdateBusDevicesFirmwareRequest,
                UpdateProgressMessage,
            ),
            "/PsControllerService/GetControllerSettings": grpclib.const.Handler(
                self.__rpc_get_controller_settings,
                grpclib.const.Cardinality.UNARY_UNARY,
                ProjectId,
                ControllerSettings,
            ),
            "/PsControllerService/SetControllerSettings": grpclib.const.Handler(
                self.__rpc_set_controller_settings,
                grpclib.const.Cardinality.UNARY_UNARY,
                SetControllerSettingsRequest,
                Status,
            ),
            "/PsControllerService/SetBusDeviceSettings": grpclib.const.Handler(
                self.__rpc_set_bus_device_settings,
                grpclib.const.Cardinality.UNARY_UNARY,
                SetBusDeviceSettingsRequest,
                Status,
            ),
            "/PsControllerService/SetInterfaceSubmoduleSettings": grpclib.const.Handler(
                self.__rpc_set_interface_submodule_settings,
                grpclib.const.Cardinality.UNARY_UNARY,
                SetInterfaceSubmoduleSettingsRequest,
                Status,
            ),
            "/PsControllerService/PingServer": grpclib.const.Handler(
                self.__rpc_ping_server,
                grpclib.const.Cardinality.UNARY_UNARY,
                PingServerRequest,
                GetControllerInfoResponse,
            ),
            "/PsControllerService/DeleteControlBoxDb": grpclib.const.Handler(
                self.__rpc_delete_control_box_db,
                grpclib.const.Cardinality.UNARY_UNARY,
                betterproto_lib_google_protobuf.Empty,
                Status,
            ),
        }
